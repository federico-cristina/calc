/**
 * In this module are defined tools to deal with complex numbers,
 * including their specific operations.
 *
 * @deps System, Math, Math.Numerics
 */
pub module Math.Numerics.Complex :
    use System, Math, Math.Numerics
{
    /**
     * Represents complex numbers.
     */
    type Complex = object :
        NumberModel
    {
        priv re : real = 0;
        priv im : real = 0;

        /**
         * Constructs a complex number object.
         *
         * @param re A real value representing the real part of the
         *           complex number.
         *
         * @param im A real value representing the immaginary part
         *           of the complex number without the 'i'.
         */
        pub Complex(re : real, im : real)
        {
            this.re = re;
            this.im = im;
        }

        /**
         * Gets the value of complex number's real part.
         */
        pub prop Re => this.re;
        /**
         * Gets the value of complex number's imaginary part.
         */
        pub prop Im => this.im;

        /**
         * Gets the conjugate complex number.
         */
        pub prop Conjugate => Complex(this.re, -this.im);
        /**
         * Gets the magnitude (absolute value) of the complex number.
         */
        pub prop Magnitude => sqrt(sqre(this.re) + sqre(this.im));

        /**
         * Performs addition operation between two complex numbers.
         *
         * @param z The complex number on the left-hand side of the
         *          addition operator.
         *
         * @param w The complex number on the right-hand side of the
         *          addition operator.
         *
         * @return The resulting complex number.
         */
        pub static op +(z : Complex, w : Complex) -> Complex
            = Complex(z.re + w.re, z.im + w.im);

        /**
         * Performs subtraction operation between two complex numbers.
         *
         * @param z The complex number on the left-hand side of the
         *          subtraction operator.
         *
         * @param w The complex number on the right-hand side of the
         *          subtraction operator.
         *
         * @return The resulting complex number.
         */
        pub static op -(z : Complex, w : Complex) -> Complex
            = Complex(z.re - w.re, z.im - w.im);

        /**
         * Performs multiplication operation between two complex numbers.
         *
         * @param z The complex number on the left-hand side of the
         *          multiplication operator.
         *
         * @param w The complex number on the right-hand side of the
         *          multiplication operator.
         *
         * @return The resulting complex number.
         */
        pub static op *(z : Complex, w : Complex) -> Complex
            = Complex((z.re * w.re) - (z.im * w.im), (z.re * w.im) + (z.im * w.re));

        /**
         * Performs division operation between two complex numbers.
         *
         * @param z The complex number on the left-hand side of the
         *          division operator.
         *
         * @param w The complex number on the right-hand side of the
         *          division operator.
         *
         * @return The resulting complex number.
         */
        pub static op /(z : Complex, w : Complex) -> Complex
            = Complex(((z.re * w.re) + (z.im * w.im)) / (sqre(z.im) + sqre(w.im)), ((z.re * w.im) - (z.im * w.re)) / (sqre(z.im) + sqre(w.im)));
    };

    /**
     * Gets the string representation of a complex number.
     */
    fn toString(z : Complex) -> String
        = String.Format("%{:r} %{:c} %{:r}i", z.re, (z.im ? '+' : '-'), abs(z.im));
}
